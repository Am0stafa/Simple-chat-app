{"version":3,"sources":["firebase/config.js","components/SignOut.jsx","components/SignIn.jsx","components/ChatMessage.jsx","components/ChatRoom.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","provider","auth","GoogleAuthProvider","time","firestore","FieldValue","serverTimestamp","SignOut","analytics","currentUser","className","onClick","signOut","SignIn","signInWithPopup","then","result","credential","accessToken","user","console","log","displayName","uid","photoURL","catch","error","code","message","email","ChatMessage","props","text","messageClass","src","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","add","createdAt","current","scrollIntoView","behavior","map","msg","key","id","ref","onSubmit","value","onChange","target","placeholder","type","disabled","App","useAuthState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iTAiBAA,IAASC,cATc,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAIX,IAAIC,EAAW,IAAIR,IAASS,KAAKC,mBAC3BC,EAAOX,IAASY,UAAUC,WAAWC,kBAgCrCL,EAAOT,IAASS,OAChBG,EAAYZ,IAASY,YC3CZG,GD4CGf,IAASgB,YClDX,WACZ,OAAOP,EAAKQ,aACR,4BAAQC,UAAU,WAAWC,QAAS,kBAAMV,EAAKW,YAAjD,cCOOC,EATA,WACX,OACI,oCACE,4BAAQH,UAAU,UAAUC,QAAS,WFgB/CV,EACKa,gBAAgBd,GAChBe,MAAK,SAACC,GAGcA,EAAOC,WACDC,YADvB,IAEIC,EAAOH,EAAOG,KAClBC,QAAQC,IAAIF,GAC2BA,EAAhCG,YAAgCH,EAAlBI,IAAkBJ,EAAZK,YAK5BC,OAAM,SAACC,GACQA,EAAMC,KAEHD,EAAME,QAEbF,EAAMG,MAEDH,EAAMT,WAErBG,QAAQC,IAAIK,QEvCV,uBACA,wG,yBCcKI,EAlBK,SAACC,GAAW,IAAD,EACKA,EAAMH,QAA9BI,EADmB,EACnBA,KAAMT,EADa,EACbA,IAAKC,EADQ,EACRA,SAGbS,EAAeV,IAAQtB,EAAKQ,YAAYc,IAAM,OAAS,WAE7D,OAAQ,oCACN,yBAAKb,UAAS,kBAAauB,IACzB,yBAAKC,IAAKV,GAAY,0DACtB,2BAAIQ,MCuCGG,EA7CE,WACb,IAAMC,EAAQC,mBACRC,EAAclC,EAAUmC,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAHlC,EAKAC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EALY,sBAOeC,mBAAS,IAPxB,mBAOZC,EAPY,KAODC,EAPC,KAUbC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQnD,EAAKQ,YAAvBc,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZc,EAAYe,IAAI,CACpBrB,KAAMe,EACNO,UAAWnD,EACXoB,MACAC,aATgB,OAYlBwB,EAAa,IACbZ,EAAMmB,QAAQC,eAAe,CAAEC,SAAU,WAbvB,2CAAH,sDAgBjB,OAAQ,oCACN,8BAEGZ,GAAYA,EAASa,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAAaC,IAAKD,EAAIE,GAAIjC,QAAS+B,OAEpE,0BAAMG,IAAK1B,KAIb,0BAAM2B,SAAUd,GAEd,2BAAOe,MAAOjB,EAAWkB,SAAU,SAACf,GAAD,OAAOF,EAAaE,EAAEgB,OAAOF,QAAQG,YAAY,uBAEpF,4BAAQC,KAAK,SAASC,UAAWtB,GAAjC,yBCTOuB,MA1Bf,WAAgB,IAAD,EAEEC,YAAatE,GAArBkB,EAFM,oBAIb,OACE,yBAAKT,UAAU,OACb,gCACE,oEACA,kBAAC,EAAD,OAGF,iCACGS,EAAO,kBAAC,EAAD,MAAe,kBAAC,EAAD,SCVXqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrE,MAAK,SAAAsE,GACJA,EAAaC,gBAEd7D,OAAM,SAAAC,GACLN,QAAQM,MAAMA,EAAME,c","file":"static/js/main.e4740eb8.chunk.js","sourcesContent":["\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAqCRXCXUZwLgE23_hW51KzLJLAgn0ozns\",\n    authDomain: \"superchat-5e202.firebaseapp.com\",\n    projectId: \"superchat-5e202\",\n    storageBucket: \"superchat-5e202.appspot.com\",\n    messagingSenderId: \"461431567446\",\n    appId: \"1:461431567446:web:54c9bee52bb51ad87b37f7\"\n};\n\nfirebase.initializeApp(firebaseConfig)\nvar provider = new firebase.auth.GoogleAuthProvider();\nconst time = firebase.firestore.FieldValue.serverTimestamp()\nconst signInWithGoogle = () => { \n\nauth\n    .signInWithPopup(provider)\n    .then((result) => {\n\n\n        var credential = result.credential;\n        var token = credential.accessToken;\n        var user = result.user;\n        console.log(user)\n        const {displayName , uid , photoURL} = user;\n        \n        \n\n\n    }).catch((error) => {\n      var errorCode = error.code;\n      \n      var errorMessage = error.message;\n\n      var email = error.email;\n\n      var credential = error.credential;\n        \n        console.log(error)\n    });\n}\n\n\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\nexport { firestore, auth,analytics,signInWithGoogle , time  }\n\n","import React from 'react'\nimport { auth } from '../firebase/config.js'\n\nconst SignOut = () => {\n    return auth.currentUser && (\n        <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\n      )\n}\n\nexport default SignOut","import React from 'react'\nimport { signInWithGoogle } from '../firebase/config.js'\n\nconst SignIn = () => {\n    return (\n        <>\n          <button className=\"sign-in\" onClick={()=>signInWithGoogle()}>Sign in with Google</button>\n          <p>Do not violate the community guidelines or you will be banned for life!</p>\n        </>\n    )\n}\n\nexport default SignIn","import React from 'react'\nimport { auth } from '../firebase/config.js'\n\nconst ChatMessage = (props) => {\n    const { text, uid, photoURL } = props.message;\n  \n    //^ to distinguish between massages send and received by comparing the currently logged in user with the user id on the message\n    const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n  \n    return (<>\n      <div className={`message ${messageClass}`}>\n        <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n        <p>{text}</p>\n      </div>\n     </>\n    \n    )\n}\n\n\n\nexport default ChatMessage","import React, { useRef, useState } from 'react';\nimport { firestore, auth,time } from '../firebase/config.js'\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport ChatMessage from './ChatMessage.jsx';\n\n\nconst ChatRoom = () => {\n    const dummy = useRef();\n    const messagesRef = firestore.collection('messages');\n    const query = messagesRef.orderBy('createdAt').limit(50);\n    //! real time change that cause rerender \n    const [messages] = useCollectionData(query, { idField: 'id' });\n  \n    const [formValue, setFormValue] = useState('');\n  \n  \n    const sendMessage = async (e) => {\n      e.preventDefault();\n  \n      const { uid, photoURL } = auth.currentUser;\n  \n      await messagesRef.add({\n        text: formValue,\n        createdAt: time,\n        uid,\n        photoURL\n      })\n  \n      setFormValue('');\n      dummy.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  \n    return (<>\n      <main>\n  \n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n  \n        <span ref={dummy}></span>\n  \n      </main>\n  \n      <form onSubmit={sendMessage}>\n  \n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n  \n        <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\n  \n      </form>\n    </>)\n}\n\nexport default ChatRoom","import React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport { auth } from './firebase/config.js'\nimport SignOut from './components/SignOut';\nimport SignIn from './components/SignIn';\nimport ChatRoom from './components/ChatRoom';\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}